# -*- coding: utf-8 -*-
"""theoliao_Lab2_demo-empty.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tDWHGnaErdiC224I9CPkC4MfSq-MObu

# Information Visualization I 
School of Information, University of Michigan

## Altair Review and Tutorial

In this tutorial we're going to walk you through the construction of visualizations using Altair--a tool to encode data using a Grammar of Graphics implementation (one called Vega-Lite). [Altair](https://altair-viz.github.io/) is a Python API to [Vega-Lite](https://vega.github.io/vega-lite/). When we code in Altair we are ultimately producing a data structure that tells Vega-Lite what to draw. Whatever is doable in Vega-Lite should be doable in Altair so you can always look at examples in one and figure out how to generate them in the other ([Vega-Lite Examples](https://vega.github.io/vega-lite/examples/) and [Altair Examples](https://altair-viz.github.io/gallery/index.html)). 

As a side note, Vega-Lite is a lighter variant of [Vega](https://vega.github.io/). Altair and Vega-Lite are equally capable. Vega, on the other hand, is much more full-featured but there is no API in Python at the moment. 

Internally, we are describing the visualization in a JSON object--a kind of data structure that has lists and dictionaries. This will allow the rendering system (the thing that draws on the screen) to intepret your Grammar of Graphics specficiation. You can always ask Altair to produce the Vega-Lite JSON object (and you can experiment directly with this JSON object in the [Vega/Vega-Lite Online editor](https://vega.github.io/editor/#/custom/vega).

In addition to Python, there are other language layers for Vega-Lite. The most popular of which is the [Javascript library](https://github.com/vega/vega-lite-api). It's very similar to the Python version so it's fairly straightforward to translate. The reason we're going to prefer Altair over the Javascript implementation is largely due to the data analysis ecosystem we have in Python. Tools like Pandas make data manipulation, cleaning, and analysis much easier.

We're going to try to cover some highlights of using Altair here, but very much encourage you to make use of online resources. Specifically:

* A whole [online course](https://github.com/uwdata/visualization-curriculum) by the creators of Vega-Lite. In fact, they show you have to use both Altair and the Javascript API.
* The [Altair tutorial](https://github.com/altair-viz/altair-tutorial) from the creator of Altair, Jake Vanderplas

Both will be useful resources if you get stuck or need more examples.

This particular tutorial will not cover interactivity or really sophisticated filtering/transformation. For the most part, we will either use data that's already in a form we want or get it into shape using Pandas.

We will be using two datasets here, the standard "cars" dataset (which has miles per gallon, cost, country of origin, horse power, etc.) and an ["indicators" dataset](http://www.bigcitieshealth.org/) that has various pieces of data for many cities in the US over time. Everything from demographics to the number of food poisonings. We've cleaned up the data a little bit for this exercise but you can grab the fu

In this tutorial we will often slice-and-dice data to it's suitable for the examples we want to show. We will do this using [Pandas](https://pandas.pydata.org/pandas-docs/stable/index.html), a data manipulation library. Each block of code contains comments that explain the Pandas operations being used.

## 1. How we build a visualization
"""

# 1.0 load up the libraries we need
import pandas as pd
import altair as alt
import pprint
pp = pprint.PrettyPrinter(indent=4)

"""Before we start building a chart, it will be helpful to understand what the Altair library does. As you write code in Altair, the system translates your code to the JSON format that Vega-Lite understands (and can render).

For example, let's say we want to use color to encode the transmission type of the car (it's either "automatic" or "manual", 1 or 0). To do so, we we use the "Color" method of the altair library.

Run the code below to see what happens:
"""

#1.1 
alt.Color('column',type='nominal')

"""What you are seeing is the JSON corresponding to "snippet" of GoG Vega-Lite code. Remember, we need to describe: <font color='#55AAE7'>data</font>, <font color="#7F7C1C">encoding/channels</font>, and <font color="#AC491A">marks</font>. Here, we're describing the <font color='#55AAE7'>data</font> ("transmission" which is a "nominal" variable) and the <font color="#7F7C1C">encoding/channel</font> (color). In English: "encode the <font color='#55AAE7'>nominal transmission</font> variable using <font color="#7F7C1C">color</font>."

A couple of things to note.

First, although Vega-Lite and Altair will try to infer the type of the data (is transmission ordinal? nominal? time?) we can override the decision. In this case, our data file uses 0 and 1 to indicate manual or automatic. So we want to make sure that Altair understands that it's a nominal cateogry and not ordinal or quantiative.

This is important: Altair/Vega-Lite will use defaults or its best guess unless you override it. Most often you will be happy with those defaults and best guesses but there will be times when you want to force the system to do something else (use different colors, transform the data in a certain way, use different kinds of axes, etc.).

Second, notice we haven't actually loaded any data yet. Altair won't give you error messages until you try to render the Chart.  Here's an example that is encoding the MPG (miles per gallon) using the X coordinate.
"""

#1.2
alt.X('column')

"""Ok, let's try to build an actual visualization. First, let's load some data:"""

#1.3 

mtcars = pd.read_csv("https://raw.githubusercontent.com/LiciaHe/SI649/master/week2/demo/mtcars.csv")

# and let's see what's inside
mtcars.sample(5)

"""Remember, to get a reasonable chart we need we need to describe what we want to use <font color='#55AAE7'>data</font>, <font color="#7F7C1C">encoding/channels</font>, and <font color="#AC491A">marks</font>.

To pick the kind of visualization we want, we need to make the right choice on the "mark." Do we want points (for a scatter plot)? lines (for a time series)? or bars (for a bar chart or heatmap)? See your choices [here](https://altair-viz.github.io/user_guide/marks.html).

Let's start easy. Let's make a scatterplot. We will tell Altair that we want a new Chart and that we will be using the mtcars dataframe. We will also, at minimum, neeed to pick the kind of mark. Scatterplots use points (a dot for every car in this case), so here's the code:
"""

#1.4
alt.Chart(mtcars).mark_point()

"""Not very interesting... what we see is something like this:
    
![](simplestscatter.png)

(If you try to click on the little icon you may not even be able to see anything because the cell will be cut off)

The chart is exactly what we asked for. There is one dot for every car in the dataset. Unfortunately, because we didn't say how to encode the data (or even what actual pieces of the data we wanted), Altair went with some defaults: all points were placed at coordinate 0,0 and rendered with the default style (a blue outlined circle).

If you're curious you can take a look at what JSON Altair generated for this call:
"""

#1.5
pp.pprint(alt.Chart(mtcars).mark_point().to_json())

"""Ok, let's go with something a bit more interesting. We'll build a scatterplot comparing miles per gallon to car weight but let's just start with one variable, MPG, that we'll put on the x-axis.  Abstractly:

* <font color="#AC491A">Mark:    Point</font>
* <font color='#55AAE7'>Data:</font>
    * <font color='#55AAE7'>MPG:		quantitative</font>
* <font color="#7F7C1C">Encoding:</font>
    * <font color="#7F7C1C">MPG:		x position</font>

Or in English: "Draw a 1-D scatterplot with a point for every car where the miles per gallon of the car determine the placement of the point."

Or in code:
"""

#1.6
alt.Chart(mtcars).mark_point().encode(
  alt.X("MPG",type="quantitative")
)

"""To break this apart: We grabbed the Altair library (`alt`) and told it to create a chart using the mtcars data frame (`.Chart(mtcars)`). We then said, for this chart use points as the mark style (`.mark_point`). We want to encode the points using the X location (`.encode(alt.X(`) as determined by the miles per gallon (`'MPG'`) variable which is a quantitative variable (`,type='quantitative'))`).

A side note: strictly speaking, we could have used `mark_circle` instead of `mark_point` if all we ever wanted were circle shapes. We're going to switch the shape later so we'll just keep using `mark_point`.

Notice that we get a nice visualization with an axis and axis label and we didn't need to do much work to get it. In fact, we could even do less work, there's a shortcut to specify the variable type (the `:Q` at the end of the variable name):
"""

#1.7
alt.Chart(mtcars).mark_point().encode(
  alt.X("MPG:Q")
)

"""In fact, if we're happy with the default inference Altair makes about the data type (it's going to guess MPG is quantiative), we could do:

```Python
alt.Chart(mtcars).mark_point().encode(
    alt.X('MPG')
)```

Or even shorter (without the alt.X... stuff): 

```Python
alt.Chart(mtcars).mark_point().encode(
    x='MPG'
)```

Or some combination:

```Python
alt.Chart(mtcars).mark_point().encode(
    x='MPG:Q'
)```

All these versions will produce the same visualization. The longest form has extra arguments that we will later use to have finer control of the look and feel or the transformations on the data. But you may see all these variants out in the wild.

Last step: let's make this a true scatter plot with 2 dimensions. We will use the weight for the Y-axis.
"""

#1.8
alt.Chart(mtcars).mark_point().encode(
  x="MPG",
  y="weight"
)

"""## 2. Variants

Let's try some basic variants on the plot. 

Maybe we want to compare different transmission types. For this, we can use the color encoding for the transmission data:
"""

#2.1
alt.Chart(mtcars).mark_point().encode(
  x="MPG",
  y="weight",
  color="transmission"
)

"""This, unfortunately, isn't quite right. Transmission in our dataset is 0 or 1. Altair understood this to mean that the data was quantiative and encoded color on the default blue gradient. We want transmission to be a categorical or nominal variable so we can use:"""

#2.2
alt.Chart(mtcars).mark_point().encode(
  x="MPG",
  y="weight",
  color="transmission:N"
)

"""This would be a bit easier to read if the dots were filled so we could better see the colors. Luckily we can easily override the "global" properties of points to make them filled (`.mark_point(filled=True)`). You can read more about this and see more options on the [Altair website](https://altair-viz.github.io/user_guide/customization.html)."""

#2.3
alt.Chart(mtcars).mark_point(filled=True).encode(
  x="MPG",
  y="weight",
  color="transmission:N"
)

"""Let's say we're working with a black and white printer so color isn't the best encoding. Modify the chart definition to use shape instead of color (you might want to sneak a peak at the different encoding channels you have access to on [Altair site](https://altair-viz.github.io/user_guide/encoding.html). Try to make the default size a bit larger so the points are easier to see.

## 3. Bars and Binning

Let's try to build some bar charts. These will require switching to a different kind of mark (`mark_bar` in this case).  Let's plot the MPG for each car:
"""

#3.1
alt.Chart(mtcars).mark_bar().encode(
  x="model",
  y="MPG",
)

"""It's a bit hard to read the text. See if you can rotate the plot:"""

#3.2
alt.Chart(mtcars).mark_bar().encode(
  y="model",
  x="MPG",
)

"""Often bar charts are used to "bin" data. For example, let's say we want to plot a bar chart of the number of cars in our dataset that are either manual or automatic. To do this, we would need to bin based on transmission type. We could use Pandas to do this. Here's one way to do this:"""

#3.3
binned = mtcars.groupby("transmission").count().reset_index()[['transmission','model']]
binned = binned.rename(columns={'model':'count'})
binned

"""From this, we can build our bar chart:"""

#3.4
alt.Chart(binned).mark_bar().encode(
  x="transmission:N",
  y="count",
)

"""Because this kind of operation is quite common, the Grammar of Graphics (generally), and Altair (specifically), provide an easier way to do this. 

We can tell Altair that we would like to bin our data (the default behavior for a nominal variable is to bin based on the categorical value... in this case 0 or 1).

`x=alt.X('transmission:N',bin=True)`

This will group all cars into two buckets: 1 and 0. At that point, we have to tell Altair what we want to know about each of those buckets. In this case we just want to know how many cars of each type we have. So we can use the special operation `count()`:
"""

#3.6
alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('transmission:N',bin=True),
  y=alt.Y('count()'),
)

"""Note that we can ask lots of other things about data in each bin. For example, we can ask for the average MPG (replace `count()` with `mean(MPG)`).

Or we could ask for the max horse power (`max(HP)`) or the median cylinders or any number of other aggregations. (see more on the [Altair site](https://altair-viz.github.io/user_guide/transform.html)). Try some of your own here:
"""

#3.7
alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('transmission:N',bin=True),
  y=alt.Y('max(HP)'),
)

"""We can bin data based on numerical properties as well. For example, we can generate a histogram of weights for our cars:"""

#3.8
alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('weight'),
  y=alt.Y('count()'),
)

"""As with most things in Altair, bins can be modified by using a special function to generate additional grammar of graphics commands. Bins, in particular, can be modified with the [BinParams](https://altair-viz.github.io/user_guide/generated/core/altair.BinParams.html#altair.BinParams) method. A simple example is making more bins:"""

#3.9
alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('weight',bin=alt.BinParams(maxbins=20)),
  y=alt.Y('count()'),
)

"""## 4 Sorting
In addition to binning, Altair also supports other transformations. Sorting is one of the most useful ones and is fairly easy. Below, we take our original bar chart showing the MPG for each car and add a sort on the Y-axis (the cars). We use the `EncodingSortField` function indicating that we want the models sorted by MPG (in descending order). More information on sorting can be found [here](https://altair-viz.github.io/user_guide/generated/core/altair.EncodingSortField.html).
"""

#4.1
alt.Chart(mtcars).mark_bar().encode(
   x='MPG',
   y=alt.Y(
       'model',
       sort=alt.EncodingSortField(
           field="MPG",  # The field to use for the sort
           order="descending"  # The order to sort in
       )
   )
)

"""## 5. Other marks
Before we leave our cars dataset, we illustrate one other mark type, `mark_rect` which can be used for heatmap style visualizations. This structure is useful when we want to bin in two different dimensions. For example, we might want to know how many cars have certain combinations of MPG and HP. This would be:
"""

#5.1
alt.Chart(mtcars).mark_rect().encode(
  x=alt.X('MPG',bin=True),
  y=alt.Y('HP',bin=True),
  color='count()'
)

"""## 6. Compound Chart 
Another cool aspect of Altair is that it's easy to put visualizations together. This is called [compound chart](https://altair-viz.github.io/user_guide/compound_charts.html). For example, the "|" operation will put two charts side by side whereas the "&" will put one on top of the other. You can combine these in various ways.
"""

#6.1
model_mpg=alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('MPG'),
  y=alt.Y('model'),
)
model_hp=alt.Chart(mtcars).mark_bar().encode(
  x=alt.X('HP'),
  y=alt.Y('model'),
)
# alt.hconcat(model_mpg,model_hp)
somemodel=model_mpg|model_hp
somemodel

#6.2 
# alt.vconcat(model_mpg,model_hp)
somemodel=model_mpg&model_hp
somemodel

#6.3 share axis
(model_mpg|model_hp).resolve_scale(y="shared")

"""## 7. Styling

We end with a note that while many of the defaults of Altair are reasonable there are situations that we need to override these either for aesthetic or more practical reasons. Take a look at the Altair documentation. Chances are you can modify the chart to look the way you want.
"""

#7.1 color, axis 
model_mpg= alt.Chart(mtcars,title="Mile Per Gallon").mark_bar(height=5).encode(
   x=alt.X('MPG'),
   y=alt.Y("model:N",           sort=alt.EncodingSortField(
           field="model:N",  # The field to use for the sort
           order="descending"  # The order to sort in
       ))
)
model_hp= alt.Chart(mtcars,title="Horse Power").mark_bar(color="pink").encode(
   x=alt.X('HP'),
   y=alt.Y("model:N", axis=None,         sort=alt.EncodingSortField(
           field="model:N",  # The field to use for the sort
           order="descending"  # The order to sort in
       ))
)

(model_mpg|model_hp).resolve_scale(y='shared').properties(
   title="MPG and HP"

)

